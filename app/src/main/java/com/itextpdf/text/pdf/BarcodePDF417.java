package com.itextpdf.text.pdf;

import com.baidu.lbsapi.auth.LBSAuthManager;
import com.baidu.mapapi.UIMsg;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Image;
import com.itextpdf.text.Jpeg;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.codec.CCITTG4Encoder;
import com.itextpdf.text.pdf.codec.TIFFConstants;
import com.itextpdf.text.pdf.codec.wmf.MetaDo;
import java.awt.Canvas;
import java.awt.Color;
import java.awt.image.MemoryImageSource;
import java.util.ArrayList;
import okhttp3.internal.http.StatusLine;
import org.apache.http.conn.ssl.TokenParser;
import org.codehaus.jackson.org.objectweb.asm.Opcodes;
import org.codehaus.jackson.smile.SmileConstants;
import org.xbill.DNS.Type;

/* loaded from: classes.dex */
public class BarcodePDF417 {
    protected static final int ABSOLUTE_MAX_TEXT_SIZE = 5420;

    /* renamed from: AL */
    protected static final int f19650AL = 28;
    protected static final int ALPHA = 65536;

    /* renamed from: AS */
    protected static final int f19651AS = 27;
    protected static final int BYTE_MODE = 901;
    protected static final int ISBYTE = 1048576;

    /* renamed from: LL */
    protected static final int f19652LL = 27;
    protected static final int LOWER = 131072;
    protected static final int MAX_DATA_CODEWORDS = 926;
    protected static final int MIXED = 262144;
    private static final String MIXED_SET = "0123456789&\r\t,:#-.$/+%*=^";

    /* renamed from: ML */
    protected static final int f19653ML = 28;
    protected static final int MOD = 929;
    protected static final int PAL = 29;
    public static final int PDF417_AUTO_ERROR_LEVEL = 0;
    public static final int PDF417_FIXED_COLUMNS = 2;
    public static final int PDF417_FIXED_RECTANGLE = 1;
    public static final int PDF417_FIXED_ROWS = 4;
    public static final int PDF417_FORCE_BINARY = 32;
    public static final int PDF417_INVERT_BITMAP = 128;
    public static final int PDF417_USE_ASPECT_RATIO = 0;
    public static final int PDF417_USE_ERROR_LEVEL = 16;
    public static final int PDF417_USE_MACRO = 256;
    public static final int PDF417_USE_RAW_CODEWORDS = 64;

    /* renamed from: PL */
    protected static final int f19654PL = 25;

    /* renamed from: PS */
    protected static final int f19655PS = 29;
    protected static final int PUNCTUATION = 524288;
    private static final String PUNCTUATION_SET = ";<>@[\\]_`~!\r\t,:\n-.$/\"|*()?{}'";
    protected static final int SPACE = 26;
    protected static final int START_CODE_SIZE = 17;
    protected static final int START_PATTERN = 130728;
    protected static final int STOP_PATTERN = 260649;
    protected static final int STOP_SIZE = 18;
    protected static final int TEXT_MODE = 900;
    private float aspectRatio;
    private int bitColumns;
    protected int bitPtr;
    private int codeColumns;
    private int codeRows;
    protected int cwPtr;
    private int errorLevel;
    private int lenCodewords;
    private String macroFileId;
    private int macroIndex;
    private int options;
    private byte[] outBits;
    protected SegmentList segmentList;
    private byte[] text;
    private float yHeight;
    private static final int[][] CLUSTERS = {new int[]{120256, 125680, 128380, 120032, 125560, 128318, 108736, 119920, 108640, 86080, 108592, 86048, 110016, 120560, 125820, 109792, 120440, 125758, 88256, 109680, 88160, 89536, 110320, 120700, 89312, 110200, 120638, 89200, 110140, 89840, 110460, 89720, 110398, 89980, 128506, 119520, 125304, 128190, 107712, 119408, 125244, 107616, 119352, 84032, 107568, 119324, 84000, 107544, 83984, 108256, 119672, 125374, 85184, 108144, 119612, 85088, 108088, 119582, 85040, 108060, 85728, 108408, 119742, 85616, 108348, 85560, 108318, 85880, 108478, 85820, 85790, 107200, 119152, 125116, 107104, 119096, 125086, 83008, 107056, 119068, 82976, 107032, 82960, 82952, 83648, 107376, 119228, 83552, 107320, 119198, 83504, 107292, 83480, 83468, 83824, 107452, 83768, 107422, 83740, 83900, 106848, 118968, 125022, 82496, 106800, 118940, 82464, 106776, 118926, 82448, 106764, 82440, 106758, 82784, 106936, 119006, 82736, 106908, 82712, 106894, 82700, 82694, 106974, 82830, 82240, 106672, 118876, 82208, 106648, 118862, 82192, 106636, 82184, 106630, 82180, 82352, 82328, 82316, 82080, 118830, 106572, 106566, 82050, 117472, 124280, 127678, 103616, 117360, 124220, 103520, 117304, 124190, 75840, 103472, 75808, 104160, 117624, 124350, 76992, 104048, 117564, 76896, 103992, 76848, 76824, 77536, 104312, 117694, 77424, 104252, 77368, 77340, 77688, 104382, 77628, 77758, 121536, 126320, 128700, 121440, 126264, 128670, 111680, 121392, 126236, 111648, 121368, 126222, 111632, 121356, 103104, 117104, 124092, 112320, 103008, 117048, 124062, 112224, 121656, 126366, 93248, 74784, 102936, 117006, 93216, 112152, 93200, 75456, 103280, 117180, 93888, 75360, 103224, 117150, 93792, 112440, 121758, 93744, 75288, 93720, 75632, 103356, 94064, 75576, 103326, 94008, 112542, 93980, 75708, 94140, 75678, 94110, 121184, 126136, 128606, 111168, 121136, 126108, 111136, 121112, 126094, 111120, 121100, 111112, 111108, 102752, 116920, 123998, 111456, 102704, 116892, 91712, 74272, 121244, 116878, 91680, 74256, 102668, 91664, 111372, 102662, 74244, 74592, 102840, 116958, 92000, 74544, 102812, 91952, 111516, 102798, 91928, 74508, 74502, 74680, 102878, 92088, 74652, 92060, 74638, 92046, 92126, 110912, 121008, 126044, 110880, 120984, 126030, 110864, 120972, 110856, 120966, 110852, 110850, 74048, 102576, 116828, 90944, 74016, 102552, 116814, 90912, 111000, 121038, 90896, 73992, 102534, 90888, 110982, 90884, 74160, 102620, 91056, 74136, 102606, 91032, 111054, 91020, 74118, 91014, 91100, 91086, 110752, 120920, 125998, 110736, 120908, 110728, 120902, 110724, 110722, 73888, 102488, 116782, 90528, 73872, 102476, 90512, 110796, 102470, 90504, 73860, 90500, 73858, 73944, 90584, 90572, 90566, 120876, 120870, 110658, 102444, 73800, 90312, 90308, 90306, 101056, 116080, 123580, 100960, 116024, 70720, 100912, 115996, 70688, 100888, 70672, 70664, 71360, 101232, 116156, 71264, 101176, 116126, 71216, 101148, 71192, 71180, 71536, 101308, 71480, 101278, 71452, 71612, 71582, 118112, 124600, 127838, 105024, 118064, 124572, 104992, 118040, 124558, 104976, 118028, 104968, 118022, 100704, 115896, 123486, 105312, 100656, 115868, 79424, 70176, 118172, 115854, 79392, 105240, 100620, 79376, 70152, 79368, 70496, 100792, 115934, 79712, 70448, 118238, 79664, 105372, 100750, 79640, 70412, 79628, 70584, 100830, 79800, 70556, 79772, 70542, 70622, 79838, 122176, 126640, 128860, 122144, 126616, 128846, 122128, 126604, 122120, 126598, 122116, 104768, 117936, 124508, 113472, 104736, 126684, 124494, 113440, 122264, 126670, 113424, 104712, 117894, 113416, 122246, 104706, 69952, 100528, 115804, 78656, 69920, 100504, 115790, 96064, 78624, 104856, 117966, 96032, 113560, 122318, 100486, 96016, 78600, 104838, 96008, 69890, 70064, 100572, 78768, 70040, 100558, 96176, 78744, 104910, 96152, 113614, 70022, 78726, 70108, 78812, 70094, 96220, 78798, 122016, 126552, 128814, 122000, 126540, 121992, 126534, 121988, 121986, 104608, 117848, 124462, 113056, 104592, 126574, 113040, 122060, 117830, 113032, 104580, 113028, 104578, 113026, 69792, 100440, 115758, 78240, 69776, 100428, 95136, 78224, 104652, 100422, 95120, 113100, 69764, 95112, 78212, 69762, 78210, 69848, 100462, 78296, 69836, 95192, 78284, 69830, 95180, 78278, 69870, 95214, 121936, 126508, 121928, 126502, 121924, 121922, 104528, 117804, 112848, 104520, 117798, 112840, 121958, 112836, 104514, 112834, 69712, 100396, 78032, 69704, 100390, 94672, 78024, 104550, 94664, 112870, 69698, 94660, 78018, 94658, 78060, 94700, 94694, 126486, 121890, 117782, 104484, 104482, 69672, 77928, 94440, 69666, 77922, 99680, 68160, 99632, 68128, 99608, 115342, 68112, 99596, 68104, 99590, 68448, 99768, 115422, 68400, 99740, 68376, 99726, 68364, 68358, 68536, 99806, 68508, 68494, 68574, 101696, 116400, 123740, 101664, 116376, 101648, 116364, 101640, 116358, 101636, 67904, 99504, 115292, 72512, 67872, 116444, 115278, 72480, 101784, 116430, 72464, 67848, 99462, 72456, 101766, 67842, 68016, 99548, 72624, 67992, 99534, 72600, 101838, 72588, 67974, 68060, 72668, 68046, 72654, 118432, 124760, 127918, 118416, 124748, 118408, 124742, 118404, 118402, 101536, 116312, 105888, 101520, 116300, 105872, 118476, 116294, 105864, 101508, 105860, 101506, 105858, 67744, 99416, 72096, 67728, 116334, 80800, 72080, 101580, 99398, 80784, 105932, 67716, 80776, 72068, 67714, 72066, 67800, 99438, 72152, 67788, 80856, 72140, 67782, 80844, 72134, 67822, 72174, 80878, 126800, 128940, 126792, 128934, 126788, 126786, 118352, 124716, 122576, 126828, 124710, 122568, 126822, 122564, 118338, 122562, 101456, 116268, 105680, 101448, 116262, 114128, 105672, 118374, 114120, 122598, 101442, 114116, 105666, 114114, 67664, 99372, 71888, 67656, 99366, 80336, 71880, 101478, 97232, 80328, 105702, 67650, 97224, 114150, 71874, 97220, 67692, 71916, 67686, 80364, 71910, 97260, 80358, 97254, 126760, 128918, 126756, 126754, 118312, 124694, 122472, 126774, 122468, 118306, 122466, 101416, 116246, 105576, 101412, 113896, 105572, 101410, 113892, 105570, 113890, 67624, 99350, 71784, 101430, 80104, 71780, 67618, 96744, 80100, 71778, 96740, 80098, 96738, 71798, 96758, 126738, 122420, 122418, 105524, 113780, 113778, 71732, 79988, 96500, 96498, 66880, 66848, 98968, 66832, 66824, 66820, 66992, 66968, 66956, 66950, 67036, 67022, 100000, 99984, 115532, 99976, 115526, 99972, 99970, 66720, 98904, 69024, 100056, 98892, 69008, 100044, 69000, 100038, 68996, 66690, 68994, 66776, 98926, 69080, 100078, 69068, 66758, 69062, 66798, 69102, 116560, 116552, 116548, 116546, 99920, 102096, 116588, 115494, 102088, 116582, 102084, 99906, 102082, 66640, 68816, 66632, 98854, 73168, 68808, 66628, 73160, 68804, 66626, 73156, 68802, 66668, 68844, 66662, 73196, 68838, 73190, 124840, 124836, 124834, 116520, 118632, 124854, 118628, 116514, 118626, 99880, 115478, 101992, 116534, 106216, 101988, 99874, 106212, 101986, 106210, 66600, 98838, 68712, 99894, 72936, 68708, 66594, 81384, 72932, 68706, 81380, 72930, 66614, 68726, 72950, 81398, 128980, 128978, 124820, 126900, 124818, 126898, 116500, 118580, 116498, 122740, 118578, 122738, 99860, 101940, 99858, 106100, 101938, 114420}, new int[]{128352, 129720, 125504, 128304, 129692, 125472, 128280, 129678, 125456, 128268, 125448, 128262, 125444, 125792, 128440, 129758, 120384, 125744, 128412, 120352, 125720, 128398, 120336, 125708, 120328, 125702, 120324, 120672, 125880, 128478, 110144, 120624, 125852, 110112, 120600, 125838, 110096, 120588, 110088, 120582, 110084, 110432, 120760, 125918, 89664, 110384, 120732, 89632, 110360, 120718, 89616, 110348, 89608, 110342, 89952, 110520, 120798, 89904, 110492, 89880, 110478, 89868, 90040, 110558, 90012, 89998, 125248, 128176, 129628, 125216, 128152, 129614, 125200, 128140, 125192, 128134, 125188, 125186, 119616, 125360, 128220, 119584, 125336, 128206, 119568, 125324, 119560, 125318, 119556, 119554, 108352, 119728, 125404, 108320, 119704, 125390, 108304, 119692, 108296, 119686, 108292, 108290, 85824, 108464, 119772, 85792, 108440, 119758, 85776, 108428, 85768, 108422, 85764, 85936, 108508, 85912, 108494, 85900, 85894, 85980, 85966, 125088, 128088, 129582, 125072, 128076, 125064, 128070, 125060, 125058, 119200, 125144, 128110, 119184, 125132, 119176, 125126, 119172, 119170, 107424, 119256, 125166, 107408, 119244, 107400, 119238, 107396, 107394, 83872, 107480, 119278, 83856, 107468, 83848, 107462, 83844, 83842, 83928, 107502, 83916, 83910, 83950, 125008, 128044, 125000, 128038, 124996, 124994, 118992, 125036, 118984, 125030, 118980, 118978, 106960, 119020, 106952, 119014, 106948, 106946, 82896, 106988, 82888, 106982, 82884, 82882, 82924, 82918, 124968, 128022, 124964, 124962, 118888, 124982, 118884, 118882, 106728, 118902, 106724, 106722, 82408, 106742, 82404, 82402, 124948, 124946, 118836, 118834, 106612, 106610, 124224, 127664, 129372, 124192, 127640, 129358, 124176, 127628, 124168, 127622, 124164, 124162, 117568, 124336, 127708, 117536, 124312, 127694, 117520, 124300, 117512, 124294, 117508, 117506, 104256, 117680, 124380, 104224, 117656, 124366, 104208, 117644, 104200, 117638, 104196, 104194, 77632, 104368, 117724, 77600, 104344, 117710, 77584, 104332, 77576, 104326, 77572, 77744, 104412, 77720, 104398, 77708, 77702, 77788, 77774, 128672, 129880, 93168, 128656, 129868, 92664, 128648, 129862, 92412, 128644, 128642, 124064, 127576, 129326, 126368, 124048, 129902, 126352, 128716, 127558, 126344, 124036, 126340, 124034, 126338, 117152, 124120, 127598, 121760, 117136, 124108, 121744, 126412, 124102, 121736, 117124, 121732, 117122, 121730, 103328, 117208, 124142, 112544, 103312, 117196, 112528, 121804, 117190, 112520, 103300, 112516, 103298, 112514, 75680, 103384, 117230, 94112, 75664, 103372, 94096, 112588, 103366, 94088, 75652, 94084, 75650, 75736, 103406, 94168, 75724, 94156, 75718, 94150, 75758, 128592, 129836, 91640, 128584, 129830, 91388, 128580, 91262, 128578, 123984, 127532, 126160, 123976, 127526, 126152, 128614, 126148, 123970, 126146, 116944, 124012, 121296, 116936, 124006, 121288, 126182, 121284, 116930, 121282, 102864, 116972, 111568, 102856, 116966, 111560, 121318, 111556, 102850, 111554, 74704, 102892, 92112, 74696, 102886, 92104, 111590, 92100, 74690, 92098, 74732, 92140, 74726, 92134, 128552, 129814, 90876, 128548, 90750, 128546, 123944, 127510, 126056, 128566, 126052, 123938, 126050, 116840, 123958, 121064, 116836, 121060, 116834, 121058, 102632, 116854, 111080, 121078, 111076, 102626, 111074, 74216, 102646, 91112, 74212, 91108, 74210, 91106, 74230, 91126, 128532, 90494, 128530, 123924, 126004, 123922, 126002, 116788, 120948, 116786, 120946, 102516, 110836, 102514, 110834, 73972, 90612, 73970, 90610, 128522, 123914, 125978, 116762, 120890, 102458, 110714, 123552, 127320, 129198, 123536, 127308, 123528, 127302, 123524, 123522, 116128, 123608, 127342, 116112, 123596, 116104, 123590, 116100, 116098, 101280, 116184, 123630, 101264, 116172, 101256, 116166, 101252, 101250, 71584, 101336, 116206, 71568, 101324, 71560, 101318, 71556, 71554, 71640, 101358, 71628, 71622, 71662, 127824, 129452, 79352, 127816, 129446, 79100, 127812, 78974, 127810, 123472, 127276, 124624, 123464, 127270, 124616, 127846, 124612, 123458, 124610, 115920, 123500, 118224, 115912, 123494, 118216, 124646, 118212, 115906, 118210, 100816, 115948, 105424, 100808, 115942, 105416, 118246, 105412, 100802, 105410, 70608, 100844, 79824, 70600, 100838, 79816, 105446, 79812, 70594, 79810, 70636, 79852, 70630, 79846, 129960, 95728, 113404, 129956, 95480, 113278, 129954, 95356, 95294, 127784, 129430, 78588, 128872, 129974, 95996, 78462, 128868, 127778, 95870, 128866, 123432, 127254, 124520, 123428, 126696, 128886, 123426, 126692, 124514, 126690, 115816, 123446, 117992, 115812, 122344, 117988, 115810, 122340, 117986, 122338, 100584, 115830, 104936, 100580, 113640, 104932, 100578, 113636, 104930, 113634, 70120, 100598, 78824, 70116, 96232, 78820, 70114, 96228, 78818, 96226, 70134, 78838, 129940, 94968, 113022, 129938, 94844, 94782, 127764, 78206, 128820, 127762, 95102, 128818, 123412, 124468, 123410, 126580, 124466, 126578, 115764, 117876, 115762, 122100, 117874, 122098, 100468, 104692, 100466, 113140, 104690, 113138, 69876, 78324, 69874, 95220, 78322, 95218, 129930, 94588, 94526, 127754, 128794, 123402, 124442, 126522, 115738, 117818, 121978, 100410, 104570, 112890, 69754, 78074, 94714, 94398, 123216, 127148, 123208, 127142, 123204, 123202, 115408, 123244, 115400, 123238, 115396, 115394, 99792, 115436, 99784, 115430, 99780, 99778, 68560, 99820, 68552, 99814, 68548, 68546, 68588, 68582, 127400, 129238, 72444, 127396, 72318, 127394, 123176, 127126, 123752, 123172, 123748, 123170, 123746, 115304, 123190, 116456, 115300, 116452, 115298, 116450, 99560, 115318, 101864, 99556, 101860, 99554, 101858, 68072, 99574, 72680, 68068, 72676, 68066, 72674, 68086, 72694, 129492, 80632, 105854, 129490, 80508, 80446, 127380, 72062, 127924, 127378, 80766, 127922, 123156, 123700, 123154, 124788, 123698, 124786, 115252, 116340, 115250, 118516, 116338, 118514, 99444, 101620, 99442, 105972, 101618, 105970, 67828, 72180, 67826, 80884, 72178, 80882, 97008, 114044, 96888, 113982, 96828, 96798, 129482, 80252, 130010, 97148, 80190, 97086, 127370, 127898, 128954, 123146, 123674, 124730, 126842, 115226, 116282, 118394, 122618, 99386, 101498, 105722, 114170, 67706, 71930, 80378, 96632, 113854, 96572, 96542, 80062, 96702, 96444, 96414, 96350, 123048, 123044, 123042, 115048, 123062, 115044, 115042, 99048, 115062, 99044, 99042, 67048, 99062, 67044, 67042, 67062, 127188, 68990, 127186, 123028, 123316, 123026, 123314, 114996, 115572, 114994, 115570, 98932, 100084, 98930, 100082, 66804, 69108, 66802, 69106, 129258, 73084, 73022, 127178, 127450, 123018, 123290, 123834, 114970, 115514, 116602, 98874, 99962, 102138, 66682, 68858, 73210, 81272, 106174, 81212, 81182, 72894, 81342, 97648, 114364, 97592, 114334, 97564, 97550, 81084, 97724, 81054, 97694, 97464, 114270, 97436, 97422, 80990, 97502, 97372, 97358, 97326, 114868, 114866, 98676, 98674, 66292, 66290, 123098, 114842, 115130, 98618, 99194, 66170, 67322, 69310, 73404, 73374, 81592, 106334, 81564, 81550, 73310, 81630, 97968, 114524, 97944, 114510, 97932, 97926, 81500, 98012, 81486, 97998, 97880, 114478, 97868, 97862, 81454, 97902, 97836, 97830, 69470, 73564, 73550, 81752, 106414, 81740, 81734, 73518, 81774, 81708, 81702}, new int[]{109536, 120312, 86976, 109040, 120060, 86496, 108792, 119934, 86256, 108668, 86136, 129744, 89056, 110072, 129736, 88560, 109820, 129732, 88312, 109694, 129730, 88188, 128464, 129772, 89592, 128456, 129766, 89340, 128452, 89214, 128450, 125904, 128492, 125896, 128486, 125892, 125890, 120784, 125932, 120776, 125926, 120772, 120770, 110544, 120812, 110536, 120806, 110532, 84928, 108016, 119548, 84448, 107768, 119422, 84208, 107644, 84088, 107582, 84028, 129640, 85488, 108284, 129636, 85240, 108158, 129634, 85116, 85054, 128232, 129654, 85756, 128228, 85630, 128226, 125416, 128246, 125412, 125410, 119784, 125430, 119780, 119778, 108520, 119798, 108516, 108514, 83424, 107256, 119166, 83184, 107132, 83064, 107070, 83004, 82974, 129588, 83704, 107390, 129586, 83580, 83518, 128116, 83838, 128114, 125172, 125170, 119284, 119282, 107508, 107506, 82672, 106876, 82552, 106814, 82492, 82462, 129562, 82812, 82750, 128058, 125050, 119034, 82296, 106686, 82236, 82206, 82366, 82108, 82078, 76736, 103920, 117500, 76256, 103672, 117374, 76016, 103548, 75896, 103486, 75836, 129384, 77296, 104188, 129380, 77048, 104062, 129378, 76924, 76862, 127720, 129398, 77564, 127716, 77438, 127714, 124392, 127734, 124388, 124386, 117736, 124406, 117732, 117730, 104424, 117750, 104420, 104418, 112096, 121592, 126334, 92608, 111856, 121468, 92384, 111736, 121406, 92272, 111676, 92216, 111646, 92188, 75232, 103160, 117118, 93664, 74992, 103036, 93424, 112252, 102974, 93304, 74812, 93244, 74782, 93214, 129332, 75512, 103294, 129908, 129330, 93944, 75388, 129906, 93820, 75326, 93758, 127604, 75646, 128756, 127602, 94078, 128754, 124148, 126452, 124146, 126450, 117236, 121844, 117234, 121842, 103412, 103410, 91584, 111344, 121212, 91360, 111224, 121150, 91248, 111164, 91192, 111134, 91164, 91150, 74480, 102780, 91888, 74360, 102718, 91768, 111422, 91708, 74270, 91678, 129306, 74620, 129850, 92028, 74558, 91966, 127546, 128634, 124026, 126202, 116986, 121338, 102906, 90848, 110968, 121022, 90736, 110908, 90680, 110878, 90652, 90638, 74104, 102590, 91000, 74044, 90940, 74014, 90910, 74174, 91070, 90480, 110780, 90424, 110750, 90396, 90382, 73916, 90556, 73886, 90526, 90296, 110686, 90268, 90254, 73822, 90334, 90204, 90190, 71136, 101112, 116094, 70896, 100988, 70776, 100926, 70716, 70686, 129204, 71416, 101246, 129202, 71292, 71230, 127348, 71550, 127346, 123636, 123634, 116212, 116210, 101364, 101362, 79296, 105200, 118140, 79072, 105080, 118078, 78960, 105020, 78904, 104990, 78876, 78862, 70384, 100732, 79600, 70264, 100670, 79480, 105278, 79420, 70174, 79390, 129178, 70524, 129466, 79740, 70462, 79678, 127290, 127866, 123514, 124666, 115962, 118266, 100858, 113376, 122232, 126654, 95424, 113264, 122172, 95328, 113208, 122142, 95280, 113180, 95256, 113166, 95244, 78560, 104824, 117950, 95968, 78448, 104764, 95856, 113468, 104734, 95800, 78364, 95772, 78350, 95758, 70008, 100542, 78712, 69948, 96120, 78652, 69918, 96060, 78622, 96030, 70078, 78782, 96190, 94912, 113008, 122044, 94816, 112952, 122014, 94768, 112924, 94744, 112910, 94732, 94726, 78192, 104636, 95088, 78136, 104606, 95032, 113054, 95004, 78094, 94990, 69820, 78268, 69790, 95164, 78238, 95134, 94560, 112824, 121950, 94512, 112796, 94488, 112782, 94476, 94470, 78008, 104542, 94648, 77980, 94620, 77966, 94606, 69726, 78046, 94686, 94384, 112732, 94360, 112718, 94348, 94342, 77916, 94428, 77902, 94414, 94296, 112686, 94284, 94278, 77870, 94318, 94252, 94246, 68336, 99708, 68216, 99646, 68156, 68126, 68476, 68414, 127162, 123258, 115450, 99834, 72416, 101752, 116414, 72304, 101692, 72248, 101662, 72220, 72206, 67960, 99518, 72568, 67900, 72508, 67870, 72478, 68030, 72638, 80576, 105840, 118460, 80480, 105784, 118430, 80432, 105756, 80408, 105742, 80396, 80390, 72048, 101564, 80752, 71992, 101534, 80696, 71964, 80668, 71950, 80654, 67772, 72124, 67742, 80828, 72094, 80798, 114016, 122552, 126814, 96832, 113968, 122524, 96800, 113944, 122510, 96784, 113932, 96776, 113926, 96772, 80224, 105656, 118366, 97120, 80176, 105628, 97072, 114076, 105614, 97048, 80140, 97036, 80134, 97030, 71864, 101470, 80312, 71836, 97208, 80284, 71822, 97180, 80270, 97166, 67678, 71902, 80350, 97246, 96576, 113840, 122460, 96544, 113816, 122446, 96528, 113804, 96520, 113798, 96516, 96514, 80048, 105564, 96688, 80024, 105550, 96664, 113870, 96652, 80006, 96646, 71772, 80092, 71758, 96732, 80078, 96718, 96416, 113752, 122414, 96400, 113740, 96392, 113734, 96388, 96386, 79960, 105518, 96472, 79948, 96460, 79942, 96454, 71726, 79982, 96494, 96336, 113708, 96328, 113702, 96324, 96322, 79916, 96364, 79910, 96358, 96296, 113686, 96292, 96290, 79894, 96310, 66936, 99006, 66876, 66846, 67006, 68976, 100028, 68920, 99998, 68892, 68878, 66748, 69052, 66718, 69022, 73056, 102072, 116574, 73008, 102044, 72984, 102030, 72972, 72966, 68792, 99934, 73144, 68764, 73116, 68750, 73102, 66654, 68830, 73182, 81216, 106160, 118620, 81184, 106136, 118606, 81168, 106124, 81160, 106118, 81156, 81154, 72880, 101980, 81328, 72856, 101966, 81304, 106190, 81292, 72838, 81286, 68700, 72924, 68686, 81372, 72910, 81358, 114336, 122712, 126894, 114320, 122700, 114312, 122694, 114308, 114306, 81056, 106072, 118574, 97696, 81040, 106060, 97680, 114380, 106054, 97672, 81028, 97668, 81026, 97666, 72792, 101934, 81112, 72780, 97752, 81100, 72774, 97740, 81094, 97734, 68654, 72814, 81134, 97774, 114256, 122668, 114248, 122662, 114244, 114242, 80976, 106028, 97488, 80968, 106022, 97480, 114278, 97476, 80962, 97474, 72748, 81004, 72742, 97516, 80998, 97510, 114216, 122646, 114212, 114210, 80936, 106006, 97384, 80932, 97380, 80930, 97378, 72726, 80950, 97398, 114196, 114194, 80916, 97332, 80914, 97330, 66236, 66206, 67256, 99166, 67228, 67214, 66142, 67294, 69296, 100188, 69272, 100174, 69260, 69254, 67164, 69340, 67150, 69326, 73376, 102232, 116654, 73360, 102220, 73352, 102214, 73348, 73346, 69208, 100142, 73432, 102254, 73420, 69190, 73414, 67118, 69230, 73454, 106320, 118700, 106312, 118694, 106308, 106306, 73296, 102188, 81616, 106348, 102182, 81608, 73284, 81604, 73282, 81602, 69164, 73324, 69158, 81644, 73318, 81638, 122792, 126934, 122788, 122786, 106280, 118678, 114536, 106276, 114532, 106274, 114530, 73256, 102166, 81512, 73252, 98024, 81508, 73250, 98020, 81506, 98018, 69142, 73270, 81526, 98038, 122772, 122770, 106260, 114484, 106258, 114482, 73236, 81460, 73234, 97908, 81458, 97906, 122762, 106250, 114458, 73226, 81434, 97850, 66396, 66382, 67416, 99246, 67404, 67398, 66350, 67438, 69456, 100268, 69448, 100262, 69444, 69442, 67372, 69484, 67366, 69478, 102312, 116694, 102308, 102306, 69416, 100246, 73576, 102326, 73572, 69410, 73570, 67350, 69430, 73590, 118740, 118738, 102292, 106420, 102290, 106418, 69396, 73524, 69394, 81780, 73522, 81778, 118730, 102282, 106394, 69386, 73498, 81722, 66476, 66470, 67496, 99286, 67492, 67490, 66454, 67510, 100308, 100306, 67476, 69556, 67474, 69554, 116714}};
    protected static final int MACRO_LAST_SEGMENT = 922;
    protected static final int MACRO_SEGMENT_ID = 928;
    protected static final int BYTESHIFT = 913;
    protected static final int BYTE_MODE_6 = 924;
    protected static final int NUMERIC_MODE = 902;
    private static final int[][] ERROR_LEVEL = {new int[]{27, 917}, new int[]{MetaDo.META_SETTEXTJUSTIFICATION, 568, 723, 809}, new int[]{Jpeg.M_APPD, StatusLine.HTTP_PERM_REDIRECT, 436, TIFFConstants.TIFFTAG_PLANARCONFIG, 646, 653, 428, 379}, new int[]{TIFFConstants.TIFFTAG_ORIENTATION, 562, SmileConstants.TOKEN_MISC_BINARY_7BIT, 755, 599, MetaDo.META_SETWINDOWEXT, 801, 132, MetaDo.META_RESTOREDC, Opcodes.INEG, 442, 428, MetaDo.META_RESTOREDC, 42, Opcodes.ARETURN, 65}, new int[]{361, 575, MACRO_LAST_SEGMENT, MetaDo.META_SETVIEWPORTORG, Opcodes.ARETURN, 586, 640, TIFFConstants.TIFFTAG_HALFTONEHINTS, 536, 742, 677, 742, 687, TIFFConstants.TIFFTAG_PLANARCONFIG, Opcodes.INSTANCEOF, 517, TIFFConstants.TIFFTAG_STRIPOFFSETS, 494, 263, Opcodes.I2S, 593, 800, 571, TIFFConstants.TIFFTAG_COLORMAP, 803, 133, 231, 390, 685, TIFFConstants.TIFFTAG_SUBIFD, 63, 410}, new int[]{539, 422, 6, 93, 862, 771, 453, 106, 610, TIFFConstants.TIFFTAG_YPOSITION, 107, 505, 733, 877, 381, 612, 723, 476, 462, Opcodes.IRETURN, 430, 609, 858, 822, 543, 376, 511, 400, 672, MetaDo.META_CREATEPENINDIRECT, TIFFConstants.TIFFTAG_YRESOLUTION, Opcodes.INVOKESTATIC, 440, 35, 519, 31, 460, 594, 225, 535, 517, 352, 605, Opcodes.IFLE, 651, 201, 488, UIMsg.d_ResultType.NEWVERSION_DOWNLOAD, 648, 733, 717, 83, UIMsg.l_ErrorNo.NETWORK_ERROR_404, 97, TIFFConstants.TIFFTAG_MINSAMPLEVALUE, 771, 840, 629, 4, 381, 843, 623, 264, 543}, new int[]{521, 310, 864, 547, 858, 580, TIFFConstants.TIFFTAG_RESOLUTIONUNIT, 379, 53, 779, 897, 444, 400, 925, 749, 415, 822, 93, 217, 208, MACRO_SEGMENT_ID, 244, 583, 620, 246, Opcodes.LCMP, 447, 631, TIFFConstants.TIFFTAG_GROUP3OPTIONS, 908, 490, 704, UIMsg.m_AppUI.MSG_CHINA_SUP_ITS, 258, 457, 907, 594, 723, 674, TIFFConstants.TIFFTAG_GROUP3OPTIONS, TIFFConstants.TIFFTAG_MODEL, 96, 684, 432, 686, 606, 860, 569, Opcodes.INSTANCEOF, 219, 129, Opcodes.INVOKEDYNAMIC, SmileConstants.TOKEN_MISC_SHARED_STRING_LONG, TIFFConstants.TIFFTAG_YPOSITION, 192, 775, TIFFConstants.TIFFTAG_ROWSPERSTRIP, Opcodes.LRETURN, 40, 379, 712, 463, 646, 776, Opcodes.LOOKUPSWITCH, 491, TIFFConstants.TIFFTAG_PAGENUMBER, MetaDo.META_CREATEFONTINDIRECT, Opcodes.IFGE, 732, 95, TIFFConstants.TIFFTAG_IMAGEDESCRIPTION, 447, 90, 507, 48, SmileConstants.TOKEN_MISC_LONG_TEXT_UNICODE, 821, 808, 898, 784, 663, 627, 378, 382, 262, 380, LBSAuthManager.CODE_AUTHENTICATING, 754, TIFFConstants.TIFFTAG_DOTRANGE, 89, 614, 87, 432, 670, 616, Opcodes.IFGT, 374, 242, 726, 600, TIFFConstants.TIFFTAG_DOCUMENTNAME, 375, 898, 845, 454, 354, 130, 814, 587, MetaDo.META_POLYGON, 34, 211, TIFFConstants.TIFFTAG_SUBIFD, 539, TIFFConstants.TIFFTAG_PAGENUMBER, 827, 865, 37, 517, 834, TIFFConstants.TIFFTAG_ARTIST, 550, 86, 801, 4, 108, 539}, new int[]{MetaDo.META_SETWINDOWEXT, 894, 75, 766, 882, 857, 74, 204, 82, 586, 708, Type.TSIG, 905, 786, 138, 720, 858, Opcodes.MONITORENTER, 311, BYTESHIFT, 275, Opcodes.ARRAYLENGTH, 375, 850, 438, 733, Opcodes.MONITORENTER, TIFFConstants.TIFFTAG_MINSAMPLEVALUE, 201, TIFFConstants.TIFFTAG_MINSAMPLEVALUE, 828, 757, 710, 814, 919, 89, 68, 569, 11, 204, 796, 605, 540, BYTESHIFT, 801, 700, 799, 137, 439, 418, 592, 668, 353, 859, 370, 694, TIFFConstants.TIFFTAG_TILEBYTECOUNTS, 240, 216, 257, TIFFConstants.TIFFTAG_PLANARCONFIG, 549, 209, 884, TIFFConstants.TIFFTAG_ARTIST, 70, 329, 793, 490, TIFFConstants.TIFFTAG_ORIENTATION, 877, 162, 749, 812, 684, 461, TIFFConstants.TIFFTAG_NUMBEROFINKS, 376, 849, 521, StatusLine.HTTP_TEMP_REDIRECT, TIFFConstants.TIFFTAG_GRAYRESPONSECURVE, 803, 712, 19, 358, 399, 908, 103, 511, 51, 8, 517, 225, TIFFConstants.TIFFTAG_FREEBYTECOUNTS, 470, 637, 731, 66, 255, 917, TIFFConstants.TIFFTAG_DOCUMENTNAME, 463, 830, 730, 433, 848, 585, 136, 538, 906, 90, 2, TIFFConstants.TIFFTAG_GRAYRESPONSEUNIT, 743, Opcodes.IFNONNULL, 655, 903, 329, 49, 802, 580, 355, 588, Opcodes.NEWARRAY, 462, 10, 134, 628, TIFFConstants.TIFFTAG_COLORMAP, 479, 130, 739, 71, 263, TIFFConstants.TIFFTAG_WHITEPOINT, 374, LBSAuthManager.CODE_UNAUTHENTICATE, 192, 605, 142, 673, 687, 234, 722, 384, Opcodes.RETURN, 752, 607, 640, 455, Opcodes.INSTANCEOF, 689, 707, MetaDo.META_POLYLINE, 641, 48, 60, 732, 621, 895, MetaDo.META_OFFSETCLIPRGN, MetaDo.META_SETRELABS, 852, 655, 309, 697, 755, 756, 60, 231, 773, 434, 421, 726, 528, UIMsg.d_ResultType.CELLID_LOCATE_REQ, Opcodes.FNEG, 49, 795, 32, Opcodes.D2F, UIMsg.d_ResultType.SHORT_URL, Jpeg.M_APPE, 836, 394, TIFFConstants.TIFFTAG_MINSAMPLEVALUE, 566, TIFFConstants.TIFFTAG_PRIMARYCHROMATICITIES, 9, 647, 550, 73, 914, 342, Opcodes.IAND, 32, 681, 331, 792, 620, 60, 609, 441, Opcodes.GETFIELD, 791, 893, 754, 605, 383, SmileConstants.TOKEN_MISC_LONG_TEXT_UNICODE, 749, 760, 213, 54, TIFFConstants.TIFFTAG_PAGENUMBER, 134, 54, 834, MetaDo.META_PAINTREGION, MACRO_LAST_SEGMENT, Opcodes.ATHROW, 910, 532, 609, 829, Opcodes.ANEWARRAY, 20, 167, 29, 872, 449, 83, 402, 41, 656, 505, 579, 481, Opcodes.LRETURN, UIMsg.l_ErrorNo.NETWORK_ERROR_404, Type.IXFR, 688, 95, 497, 555, 642, 543, StatusLine.HTTP_TEMP_REDIRECT, Opcodes.IF_ICMPEQ, BYTE_MODE_6, 558, 648, 55, 497, 10}, new int[]{352, 77, 373, UIMsg.d_ResultType.LOC_INFO_UPLOAD, 35, 599, 428, 207, 409, 574, Opcodes.FNEG, 498, TIFFConstants.TIFFTAG_PAGENAME, 380, 350, 492, Opcodes.MULTIANEWARRAY, TIFFConstants.TIFFTAG_CELLLENGTH, 920, Opcodes.IFLT, 914, MetaDo.META_PAINTREGION, 229, 643, 294, 871, TIFFConstants.TIFFTAG_DATETIME, 88, 87, Opcodes.INSTANCEOF, 352, 781, 846, 75, TIFFConstants.TIFFTAG_CLEANFAXDATA, 520, 435, 543, 203, Element.WRITABLE_DIRECT, Type.TKEY, 346, 781, 621, 640, 268, 794, 534, 539, 781, 408, 390, 644, 102, 476, 499, TIFFConstants.TIFFTAG_GRAYRESPONSEUNIT, 632, 545, 37, 858, 916, MetaDo.META_FILLREGION, 41, 542, TIFFConstants.TIFFTAG_FREEBYTECOUNTS, Opcodes.ISHR, TIFFConstants.TIFFTAG_MODEL, 383, 800, 485, 98, 752, 472, 761, 107, 784, 860, 658, 741, TIFFConstants.TIFFTAG_GRAYRESPONSEUNIT, 204, 681, 407, 855, 85, 99, 62, 482, Opcodes.GETFIELD, 20, TIFFConstants.TIFFTAG_PAGENUMBER, 451, 593, BYTESHIFT, 142, 808, 684, TIFFConstants.TIFFTAG_YPOSITION, 536, MetaDo.META_SETMAPPERFLAGS, 76, 653, 899, 729, 567, 744, 390, 513, 192, UIMsg.m_AppUI.MSG_CHINA_SUP_ITS, 258, 240, 518, 794, 395, 768, 848, 51, 610, 384, Opcodes.JSR, Opcodes.ARRAYLENGTH, 826, TIFFConstants.TIFFTAG_CONSECUTIVEBADFAXLINES, 596, 786, 303, 570, 381, 415, 641, Opcodes.IFGE, Jpeg.M_APPD, Opcodes.DCMPL, 429, 531, 207, 676, 710, 89, Opcodes.JSR, 304, 402, 40, 708, 575, 162, 864, 229, 65, 861, 841, 512, Opcodes.IF_ICMPLE, 477, 221, 92, 358, 785, TIFFConstants.TIFFTAG_FREEOFFSETS, 357, 850, 836, 827, 736, 707, 94, 8, 494, 114, 521, 2, 499, 851, 543, Opcodes.DCMPG, 729, 771, 95, 248, 361, 578, TIFFConstants.TIFFTAG_TILELENGTH, 856, 797, TIFFConstants.TIFFTAG_FREEBYTECOUNTS, 51, 684, 466, 533, 820, 669, 45, NUMERIC_MODE, 452, 167, 342, 244, Opcodes.LRETURN, 35, 463, 651, 51, 699, 591, 452, 578, 37, Opcodes.IUSHR, MetaDo.META_INVERTREGION, TIFFConstants.TIFFTAG_INKSET, MetaDo.META_FILLREGION, 43, 427, 119, 662, 777, 475, 850, MetaDo.META_CREATEBRUSHINDIRECT, 364, 578, 911, TIFFConstants.TIFFTAG_YRESOLUTION, 711, 472, 420, 245, TIFFConstants.TIFFTAG_FREEOFFSETS, 594, 394, 511, TIFFConstants.TIFFTAG_CLEANFAXDATA, 589, 777, 699, 688, 43, 408, 842, 383, 721, 521, 560, 644, 714, 559, 62, Opcodes.I2B, 873, 663, 713, Opcodes.IF_ICMPEQ, 672, 729, 624, 59, Opcodes.INSTANCEOF, 417, Opcodes.IFLE, 209, 563, MetaDo.META_SELECTPALETTE, 343, 693, 109, 608, 563, 365, Opcodes.PUTFIELD, 772, 677, 310, 248, 353, 708, 410, 579, 870, 617, 841, 632, 860, TIFFConstants.TIFFTAG_FREEBYTECOUNTS, 536, 35, 777, 618, 586, 424, 833, 77, 597, 346, TIFFConstants.TIFFTAG_DOCUMENTNAME, 757, 632, 695, 751, 331, MetaDo.META_CREATEPALETTE, Opcodes.INVOKESTATIC, 45, 787, 680, 18, 66, 407, 369, 54, 492, SmileConstants.TOKEN_MISC_LONG_TEXT_UNICODE, 613, 830, MACRO_LAST_SEGMENT, 437, 519, 644, 905, 789, 420, TIFFConstants.TIFFTAG_SOFTWARE, 441, 207, 300, 892, 827, 141, 537, 381, 662, 513, 56, 252, TIFFConstants.TIFFTAG_SMAXSAMPLEVALUE, 242, 797, 838, 837, 720, 224, StatusLine.HTTP_TEMP_REDIRECT, 631, 61, 87, 560, 310, 756, 665, 397, 808, 851, 309, 473, 795, 378, 31, 647, 915, 459, 806, 590, 731, 425, 216, 548, Type.TKEY, TIFFConstants.TIFFTAG_HALFTONEHINTS, 881, 699, 535, 673, 782, 210, 815, 905, 303, 843, MACRO_LAST_SEGMENT, TIFFConstants.TIFFTAG_MAXSAMPLEVALUE, 73, 469, 791, 660, 162, 498, StatusLine.HTTP_PERM_REDIRECT, Opcodes.IFLT, 422, 907, 817, Opcodes.NEW, 62, 16, 425, 535, TIFFConstants.TIFFTAG_DOTRANGE, TIFFConstants.TIFFTAG_XPOSITION, 437, 375, TIFFConstants.TIFFTAG_STRIPOFFSETS, 610, TIFFConstants.TIFFTAG_RESOLUTIONUNIT, Opcodes.INVOKESPECIAL, 923, Opcodes.INEG, 667, 751, 353, 62, 366, 691, 379, 687, 842, 37, 357, 720, 742, TIFFConstants.TIFFTAG_SUBIFD, 5, 39, 923, 311, 424, 242, 749, TIFFConstants.TIFFTAG_HALFTONEHINTS, 54, 669, TIFFConstants.TIFFTAG_HOSTCOMPUTER, 342, MetaDo.META_PAINTREGION, 534, 105, 667, 488, 640, 672, 576, 540, TIFFConstants.TIFFTAG_HOSTCOMPUTER, 486, 721, 610, 46, 656, 447, Opcodes.LOOKUPSWITCH, 616, 464, Opcodes.ARRAYLENGTH, 531, TIFFConstants.TIFFTAG_PAGENUMBER, TIFFConstants.TIFFTAG_HALFTONEHINTS, MetaDo.META_CREATEPENINDIRECT, 752, 533, Opcodes.DRETURN, 134, 14, 381, 433, 717, 45, 111, 20, 596, TIFFConstants.TIFFTAG_PLANARCONFIG, 736, 138, 646, 411, 877, 669, 141, 919, 45, 780, 407, Opcodes.IF_ICMPLE, TIFFConstants.TIFFTAG_INKSET, 899, Opcodes.IF_ACMPEQ, 726, 600, TIFFConstants.TIFFTAG_TILEBYTECOUNTS, 498, 655, 357, 752, 768, 223, 849, 647, 63, 310, 863, Type.IXFR, 366, 304, TIFFConstants.TIFFTAG_XRESOLUTION, 738, 675, 410, 389, 244, 31, 121, 303, 263}};
    private int macroSegmentCount = 0;
    private int macroSegmentId = -1;
    private int[] codewords = new int[MACRO_SEGMENT_ID];

    protected static int maxPossibleErrorLevel(int i) {
        int i2 = 8;
        int i3 = 512;
        while (i2 > 0) {
            if (i >= i3) {
                return i2;
            }
            i2--;
            i3 >>= 1;
        }
        return 0;
    }

    public BarcodePDF417() {
        setDefaultParameters();
    }

    public void setMacroSegmentId(int i) {
        this.macroSegmentId = i;
    }

    public void setMacroSegmentCount(int i) {
        this.macroSegmentCount = i;
    }

    public void setMacroFileId(String str) {
        this.macroFileId = str;
    }

    protected boolean checkSegmentType(Segment segment, char c) {
        return segment != null && segment.type == c;
    }

    protected int getSegmentLength(Segment segment) {
        if (segment == null) {
            return 0;
        }
        return segment.end - segment.start;
    }

    public void setDefaultParameters() {
        this.options = 0;
        this.outBits = null;
        this.text = new byte[0];
        this.yHeight = 3.0f;
        this.aspectRatio = 0.5f;
    }

    protected void outCodeword17(int i) {
        int i2 = this.bitPtr;
        int i3 = i2 / 8;
        int i4 = i2 - (i3 * 8);
        byte[] bArr = this.outBits;
        int i5 = i3 + 1;
        bArr[i3] = (byte) (bArr[i3] | (i >> (i4 + 9)));
        int i6 = i5 + 1;
        int i7 = i4 + 1;
        bArr[i5] = (byte) (bArr[i5] | (i >> i7));
        bArr[i6] = (byte) (((i << 8) >> i7) | bArr[i6]);
        this.bitPtr = i2 + 17;
    }

    protected void outCodeword18(int i) {
        int i2 = this.bitPtr;
        int i3 = i2 / 8;
        int i4 = i2 - (i3 * 8);
        byte[] bArr = this.outBits;
        int i5 = i3 + 1;
        bArr[i3] = (byte) (bArr[i3] | (i >> (i4 + 10)));
        int i6 = i5 + 1;
        int i7 = i4 + 2;
        bArr[i5] = (byte) (bArr[i5] | (i >> i7));
        bArr[i6] = (byte) (((i << 8) >> i7) | bArr[i6]);
        if (i4 == 7) {
            int i8 = i6 + 1;
            bArr[i8] = (byte) (bArr[i8] | 128);
        }
        this.bitPtr += 18;
    }

    protected void outCodeword(int i) {
        outCodeword17(i);
    }

    protected void outStopPattern() {
        outCodeword18(STOP_PATTERN);
    }

    protected void outStartPattern() {
        outCodeword17(START_PATTERN);
    }

    protected void outPaintCode() {
        int i;
        int i2;
        this.bitColumns = ((this.codeColumns + 3) * 17) + 18;
        this.outBits = new byte[(((this.bitColumns - 1) / 8) + 1) * this.codeRows];
        int i3 = 0;
        int i4 = 0;
        int i5 = 0;
        while (i4 < this.codeRows) {
            this.bitPtr = (((this.bitColumns - 1) / 8) + 1) * 8 * i4;
            int i6 = i4 % 3;
            int[] iArr = CLUSTERS[i6];
            outStartPattern();
            switch (i6) {
                case 0:
                    i = ((i4 / 3) * 30) + ((this.codeRows - 1) / 3);
                    break;
                case 1:
                    i = ((i4 / 3) * 30) + (this.errorLevel * 3) + ((this.codeRows - 1) % 3);
                    break;
                default:
                    i = (((i4 / 3) * 30) + this.codeColumns) - 1;
                    break;
            }
            outCodeword(iArr[i]);
            int i7 = i5;
            int i8 = 0;
            while (true) {
                int i9 = this.codeColumns;
                if (i8 < i9) {
                    outCodeword(iArr[this.codewords[i7]]);
                    i8++;
                    i7++;
                } else {
                    switch (i6) {
                        case 0:
                            i2 = (((i4 / 3) * 30) + i9) - 1;
                            break;
                        case 1:
                            i2 = ((i4 / 3) * 30) + ((this.codeRows - 1) / 3);
                            break;
                        default:
                            i2 = ((i4 / 3) * 30) + (this.errorLevel * 3) + ((this.codeRows - 1) % 3);
                            break;
                    }
                    outCodeword(iArr[i2]);
                    outStopPattern();
                    i4++;
                    i5 = i7;
                }
            }
        }
        if ((this.options & 128) == 0) {
            return;
        }
        while (true) {
            byte[] bArr = this.outBits;
            if (i3 >= bArr.length) {
                return;
            }
            bArr[i3] = (byte) (bArr[i3] ^ 255);
            i3++;
        }
    }

    protected void calculateErrorCorrection(int i) {
        int i2 = this.errorLevel;
        if (i2 < 0 || i2 > 8) {
            this.errorLevel = 0;
        }
        int[][] iArr = ERROR_LEVEL;
        int i3 = this.errorLevel;
        int[] iArr2 = iArr[i3];
        int i4 = 2 << i3;
        for (int i5 = 0; i5 < i4; i5++) {
            this.codewords[i + i5] = 0;
        }
        int i6 = i4 - 1;
        for (int i7 = 0; i7 < this.lenCodewords; i7++) {
            int[] iArr3 = this.codewords;
            int i8 = iArr3[i7] + iArr3[i];
            int i9 = 0;
            while (i9 <= i6) {
                int i10 = 929 - ((iArr2[i6 - i9] * i8) % MOD);
                int[] iArr4 = this.codewords;
                int i11 = i + i9;
                iArr4[i11] = ((i9 == i6 ? 0 : iArr4[i11 + 1]) + i10) % MOD;
                i9++;
            }
        }
        for (int i12 = 0; i12 < i4; i12++) {
            int[] iArr5 = this.codewords;
            int i13 = i + i12;
            iArr5[i13] = (929 - iArr5[i13]) % MOD;
        }
    }

    private static int getTextTypeAndValue(byte[] bArr, int i, int i2) {
        if (i2 >= i) {
            return 0;
        }
        char c = (char) (bArr[i2] & 255);
        if (c < 'A' || c > 'Z') {
            if (c < 'a' || c > 'z') {
                if (c == ' ') {
                    return 458778;
                }
                int indexOf = MIXED_SET.indexOf(c);
                int indexOf2 = PUNCTUATION_SET.indexOf(c);
                return (indexOf >= 0 || indexOf2 >= 0) ? indexOf == indexOf2 ? indexOf + 786432 : indexOf >= 0 ? indexOf + 262144 : indexOf2 + 524288 : c + 0;
            }
            return (c + 0) - 97;
        }
        return (c + 0) - 65;
    }

    protected int getTextTypeAndValue(int i, int i2) {
        return getTextTypeAndValue(this.text, i, i2);
    }

    private void textCompaction(byte[] bArr, int i, int i2) {
        int i3;
        int i4;
        int i5;
        int[] iArr = new int[10840];
        int i6 = i2 + i;
        int i7 = 0;
        int i8 = i;
        int i9 = 0;
        int i10 = 65536;
        int i11 = 0;
        while (i8 < i6) {
            int textTypeAndValue = getTextTypeAndValue(bArr, i6, i8);
            if ((textTypeAndValue & i10) != 0) {
                iArr[i9] = textTypeAndValue & 255;
                i9++;
            } else if ((1048576 & textTypeAndValue) != 0) {
                if ((i9 & 1) != 0) {
                    i5 = i9 + 1;
                    iArr[i9] = 29;
                    if ((i10 & 524288) != 0) {
                        i10 = 65536;
                    }
                } else {
                    i5 = i9;
                }
                int i12 = i5 + 1;
                iArr[i5] = BYTESHIFT;
                iArr[i12] = textTypeAndValue & 255;
                i11 += 2;
                i9 = i12 + 1;
            } else if (i10 != 65536) {
                if (i10 != 131072) {
                    if (i10 != 262144) {
                        if (i10 == 524288) {
                            iArr[i9] = 29;
                            i8--;
                            i9++;
                            i10 = 65536;
                        }
                    } else if ((textTypeAndValue & 131072) != 0) {
                        int i13 = i9 + 1;
                        iArr[i9] = 27;
                        i9 = i13 + 1;
                        iArr[i13] = textTypeAndValue & 255;
                        i10 = 131072;
                    } else if ((textTypeAndValue & 65536) != 0) {
                        int i14 = i9 + 1;
                        iArr[i9] = 28;
                        i9 = i14 + 1;
                        iArr[i14] = textTypeAndValue & 255;
                        i10 = 65536;
                    } else if ((getTextTypeAndValue(bArr, i6, i8 + 1) & getTextTypeAndValue(bArr, i6, i8 + 2) & 524288) != 0) {
                        int i15 = i9 + 1;
                        iArr[i9] = 25;
                        i9 = i15 + 1;
                        iArr[i15] = textTypeAndValue & 255;
                        i10 = 524288;
                    } else {
                        int i16 = i9 + 1;
                        iArr[i9] = 29;
                        i9 = i16 + 1;
                        iArr[i16] = textTypeAndValue & 255;
                    }
                } else if ((textTypeAndValue & 65536) != 0) {
                    if ((getTextTypeAndValue(bArr, i6, i8 + 1) & getTextTypeAndValue(bArr, i6, i8 + 2) & 65536) != 0) {
                        int i17 = i9 + 1;
                        iArr[i9] = 28;
                        i4 = i17 + 1;
                        iArr[i17] = 28;
                        i10 = 65536;
                    } else {
                        iArr[i9] = 27;
                        i4 = i9 + 1;
                    }
                    iArr[i4] = textTypeAndValue & 255;
                    i9 = i4 + 1;
                } else if ((textTypeAndValue & 262144) != 0) {
                    int i18 = i9 + 1;
                    iArr[i9] = 28;
                    i9 = i18 + 1;
                    iArr[i18] = textTypeAndValue & 255;
                    i10 = 262144;
                } else if ((getTextTypeAndValue(bArr, i6, i8 + 1) & getTextTypeAndValue(bArr, i6, i8 + 2) & 524288) != 0) {
                    int i19 = i9 + 1;
                    iArr[i9] = 28;
                    int i20 = i19 + 1;
                    iArr[i19] = 25;
                    iArr[i20] = textTypeAndValue & 255;
                    i9 = i20 + 1;
                    i10 = 524288;
                } else {
                    int i21 = i9 + 1;
                    iArr[i9] = 29;
                    i9 = i21 + 1;
                    iArr[i21] = textTypeAndValue & 255;
                }
            } else if ((textTypeAndValue & 131072) != 0) {
                int i22 = i9 + 1;
                iArr[i9] = 27;
                i9 = i22 + 1;
                iArr[i22] = textTypeAndValue & 255;
                i10 = 131072;
            } else if ((textTypeAndValue & 262144) != 0) {
                int i23 = i9 + 1;
                iArr[i9] = 28;
                i9 = i23 + 1;
                iArr[i23] = textTypeAndValue & 255;
                i10 = 262144;
            } else if ((getTextTypeAndValue(bArr, i6, i8 + 1) & getTextTypeAndValue(bArr, i6, i8 + 2) & 524288) != 0) {
                int i24 = i9 + 1;
                iArr[i9] = 28;
                int i25 = i24 + 1;
                iArr[i24] = 25;
                iArr[i25] = textTypeAndValue & 255;
                i9 = i25 + 1;
                i10 = 524288;
            } else {
                int i26 = i9 + 1;
                iArr[i9] = 29;
                i9 = i26 + 1;
                iArr[i26] = textTypeAndValue & 255;
            }
            i8++;
        }
        if ((i9 & 1) != 0) {
            i3 = i9 + 1;
            iArr[i9] = 29;
        } else {
            i3 = i9;
        }
        if (((i11 + i3) / 2) + this.cwPtr > MAX_DATA_CODEWORDS) {
            throw new IndexOutOfBoundsException(MessageLocalization.getComposedMessage("the.text.is.too.big", new Object[0]));
        }
        while (i7 < i3) {
            int i27 = i7 + 1;
            int i28 = iArr[i7];
            if (i28 >= 30) {
                int[] iArr2 = this.codewords;
                int i29 = this.cwPtr;
                this.cwPtr = i29 + 1;
                iArr2[i29] = i28;
                int i30 = this.cwPtr;
                this.cwPtr = i30 + 1;
                iArr2[i30] = iArr[i27];
                i7 = i27 + 1;
            } else {
                int[] iArr3 = this.codewords;
                int i31 = this.cwPtr;
                this.cwPtr = i31 + 1;
                iArr3[i31] = (i28 * 30) + iArr[i27];
                i7 = i27 + 1;
            }
        }
    }

    protected void textCompaction(int i, int i2) {
        textCompaction(this.text, i, i2);
    }

    protected void basicNumberCompaction(int i, int i2) {
        basicNumberCompaction(this.text, i, i2);
    }

    private void basicNumberCompaction(byte[] bArr, int i, int i2) {
        int i3 = this.cwPtr;
        int i4 = i2 / 3;
        this.cwPtr = i4 + 1 + i3;
        for (int i5 = 0; i5 <= i4; i5++) {
            this.codewords[i3 + i5] = 0;
        }
        int i6 = i3 + i4;
        this.codewords[i6] = 1;
        int i7 = i2 + i;
        while (i < i7) {
            for (int i8 = i4; i8 >= 0; i8--) {
                int[] iArr = this.codewords;
                int i9 = i3 + i8;
                iArr[i9] = iArr[i9] * 10;
            }
            int[] iArr2 = this.codewords;
            iArr2[i6] = iArr2[i6] + (bArr[i] - 48);
            for (int i10 = i4; i10 > 0; i10--) {
                int[] iArr3 = this.codewords;
                int i11 = i3 + i10;
                int i12 = i11 - 1;
                iArr3[i12] = iArr3[i12] + (iArr3[i11] / TEXT_MODE);
                iArr3[i11] = iArr3[i11] % TEXT_MODE;
            }
            i++;
        }
    }

    private void numberCompaction(byte[] bArr, int i, int i2) {
        int i3 = (i2 / 44) * 15;
        int i4 = i2 % 44;
        if (i4 != 0) {
            i3 = i3 + (i4 / 3) + 1;
        }
        if (i3 + this.cwPtr > MAX_DATA_CODEWORDS) {
            throw new IndexOutOfBoundsException(MessageLocalization.getComposedMessage("the.text.is.too.big", new Object[0]));
        }
        int i5 = i2 + i;
        while (i < i5) {
            int i6 = i5 - i;
            if (i6 >= 44) {
                i6 = 44;
            }
            basicNumberCompaction(bArr, i, i6);
            i += 44;
        }
    }

    protected void numberCompaction(int i, int i2) {
        numberCompaction(this.text, i, i2);
    }

    protected void byteCompaction6(int i) {
        int i2 = this.cwPtr;
        this.cwPtr = i2 + 5;
        for (int i3 = 0; i3 <= 4; i3++) {
            this.codewords[i2 + i3] = 0;
        }
        int i4 = i + 6;
        while (i < i4) {
            for (int i5 = 4; i5 >= 0; i5--) {
                int[] iArr = this.codewords;
                int i6 = i2 + i5;
                iArr[i6] = iArr[i6] * 256;
            }
            int[] iArr2 = this.codewords;
            int i7 = i2 + 4;
            iArr2[i7] = iArr2[i7] + (this.text[i] & 255);
            for (int i8 = 4; i8 > 0; i8--) {
                int[] iArr3 = this.codewords;
                int i9 = i2 + i8;
                int i10 = i9 - 1;
                iArr3[i10] = iArr3[i10] + (iArr3[i9] / TEXT_MODE);
                iArr3[i9] = iArr3[i9] % TEXT_MODE;
            }
            i++;
        }
    }

    void byteCompaction(int i, int i2) {
        if (((i2 / 6) * 5) + (i2 % 6) + this.cwPtr > MAX_DATA_CODEWORDS) {
            throw new IndexOutOfBoundsException(MessageLocalization.getComposedMessage("the.text.is.too.big", new Object[0]));
        }
        int i3 = i2 + i;
        while (i < i3) {
            int i4 = i3 - i;
            if (i4 >= 44) {
                i4 = 6;
            }
            if (i4 < 6) {
                for (int i5 = 0; i5 < i4; i5++) {
                    int[] iArr = this.codewords;
                    int i6 = this.cwPtr;
                    this.cwPtr = i6 + 1;
                    iArr[i6] = this.text[i + i5] & 255;
                }
            } else {
                byteCompaction6(i);
            }
            i += 6;
        }
    }

    void breakString() {
        char c;
        boolean z;
        char c2;
        boolean z2;
        int length = this.text.length;
        int i = this.options;
        char c3 = TokenParser.f24154SP;
        if ((i & 32) != 0) {
            this.segmentList.add('B', 0, length);
            return;
        }
        int i2 = 0;
        int i3 = 0;
        int i4 = 0;
        for (int i5 = 0; i5 < length; i5++) {
            char c4 = (char) (this.text[i5] & 255);
            if (c4 < '0' || c4 > '9') {
                if (i2 >= 13) {
                    if (i3 != i4) {
                        char c5 = (char) (this.text[i3] & 255);
                        boolean z3 = (c5 >= ' ' && c5 < 127) || c5 == '\r' || c5 == '\n' || c5 == '\t';
                        int i6 = i3;
                        while (i3 < i4) {
                            char c6 = (char) (this.text[i3] & 255);
                            boolean z4 = (c6 >= ' ' && c6 < 127) || c6 == '\r' || c6 == '\n' || c6 == '\t';
                            if (z4 != z3) {
                                this.segmentList.add(z3 ? 'T' : 'B', i6, i3);
                                i6 = i3;
                                z3 = z4;
                            }
                            i3++;
                        }
                        this.segmentList.add(z3 ? 'T' : 'B', i6, i4);
                    }
                    this.segmentList.add('N', i4, i5);
                    i3 = i5;
                }
                i2 = 0;
            } else {
                if (i2 == 0) {
                    i4 = i5;
                }
                i2++;
            }
        }
        if (i2 < 13) {
            i4 = length;
        }
        if (i3 != i4) {
            char c7 = (char) (this.text[i3] & 255);
            boolean z5 = (c7 >= ' ' && c7 < 127) || c7 == '\r' || c7 == '\n' || c7 == '\t';
            int i7 = i3;
            while (i3 < i4) {
                char c8 = (char) (this.text[i3] & 255);
                boolean z6 = (c8 >= c3 && c8 < 127) || c8 == '\r' || c8 == '\n' || c8 == '\t';
                if (z6 != z5) {
                    this.segmentList.add(z5 ? 'T' : 'B', i7, i3);
                    i7 = i3;
                    z5 = z6;
                }
                i3++;
                c3 = TokenParser.f24154SP;
            }
            this.segmentList.add(z5 ? 'T' : 'B', i7, i4);
        }
        if (i2 >= 13) {
            this.segmentList.add('N', i4, length);
        }
        int i8 = 0;
        while (i8 < this.segmentList.size()) {
            Segment segment = this.segmentList.get(i8);
            Segment segment2 = this.segmentList.get(i8 - 1);
            Segment segment3 = this.segmentList.get(i8 + 1);
            if (checkSegmentType(segment, 'B') && getSegmentLength(segment) == 1 && checkSegmentType(segment2, 'T') && checkSegmentType(segment3, 'T') && getSegmentLength(segment2) + getSegmentLength(segment3) >= 3) {
                segment2.end = segment3.end;
                this.segmentList.remove(i8);
                this.segmentList.remove(i8);
                i8 = -1;
            }
            i8++;
        }
        int i9 = 0;
        while (i9 < this.segmentList.size()) {
            Segment segment4 = this.segmentList.get(i9);
            int i10 = i9 - 1;
            Segment segment5 = this.segmentList.get(i10);
            Segment segment6 = this.segmentList.get(i9 + 1);
            if (checkSegmentType(segment4, 'T') && getSegmentLength(segment4) >= 5) {
                if ((checkSegmentType(segment5, 'B') && getSegmentLength(segment5) == 1) || checkSegmentType(segment5, 'T')) {
                    segment4.start = segment5.start;
                    this.segmentList.remove(i10);
                    i9--;
                    z2 = true;
                } else {
                    z2 = false;
                }
                if ((checkSegmentType(segment6, 'B') && getSegmentLength(segment6) == 1) || checkSegmentType(segment6, 'T')) {
                    segment4.end = segment6.end;
                    this.segmentList.remove(i9 + 1);
                    z2 = true;
                }
                if (z2) {
                    i9 = -1;
                }
            }
            i9++;
        }
        int i11 = 0;
        while (i11 < this.segmentList.size()) {
            Segment segment7 = this.segmentList.get(i11);
            int i12 = i11 - 1;
            Segment segment8 = this.segmentList.get(i12);
            Segment segment9 = this.segmentList.get(i11 + 1);
            if (checkSegmentType(segment7, 'B')) {
                if ((!checkSegmentType(segment8, 'T') || getSegmentLength(segment8) >= 5) && !checkSegmentType(segment8, 'B')) {
                    z = false;
                    c2 = 'T';
                } else {
                    segment7.start = segment8.start;
                    this.segmentList.remove(i12);
                    i11--;
                    z = true;
                    c2 = 'T';
                }
                if ((checkSegmentType(segment9, c2) && getSegmentLength(segment9) < 5) || checkSegmentType(segment9, 'B')) {
                    segment7.end = segment9.end;
                    this.segmentList.remove(i11 + 1);
                    z = true;
                }
                if (z) {
                    i11 = -1;
                }
            }
            i11++;
        }
        if (this.segmentList.size() == 1) {
            Segment segment10 = this.segmentList.get(0);
            if (segment10.type != 'T' || getSegmentLength(segment10) < 8) {
                return;
            }
            int i13 = segment10.start;
            while (i13 < segment10.end && (c = (char) (this.text[i13] & 255)) >= '0' && c <= '9') {
                i13++;
            }
            if (i13 == segment10.end) {
                segment10.type = 'N';
            }
        }
    }

    protected void assemble() {
        if (this.segmentList.size() == 0) {
            return;
        }
        this.cwPtr = 1;
        for (int i = 0; i < this.segmentList.size(); i++) {
            Segment segment = this.segmentList.get(i);
            char c = segment.type;
            if (c == 'B') {
                int[] iArr = this.codewords;
                int i2 = this.cwPtr;
                this.cwPtr = i2 + 1;
                iArr[i2] = getSegmentLength(segment) % 6 != 0 ? BYTE_MODE : BYTE_MODE_6;
                byteCompaction(segment.start, getSegmentLength(segment));
            } else if (c == 'N') {
                int[] iArr2 = this.codewords;
                int i3 = this.cwPtr;
                this.cwPtr = i3 + 1;
                iArr2[i3] = NUMERIC_MODE;
                numberCompaction(segment.start, getSegmentLength(segment));
            } else if (c == 'T') {
                if (i != 0) {
                    int[] iArr3 = this.codewords;
                    int i4 = this.cwPtr;
                    this.cwPtr = i4 + 1;
                    iArr3[i4] = TEXT_MODE;
                }
                textCompaction(segment.start, getSegmentLength(segment));
            }
        }
        if ((this.options & 256) != 0) {
            macroCodes();
        }
    }

    private void macroCodes() {
        int i = this.macroSegmentId;
        if (i < 0) {
            throw new IllegalStateException(MessageLocalization.getComposedMessage("macrosegmentid.must.be.gt.eq.0", new Object[0]));
        }
        int i2 = this.macroSegmentCount;
        if (i >= i2) {
            throw new IllegalStateException(MessageLocalization.getComposedMessage("macrosegmentid.must.be.lt.macrosemgentcount", new Object[0]));
        }
        if (i2 <= 0) {
            throw new IllegalStateException(MessageLocalization.getComposedMessage("macrosemgentcount.must.be.gt.0", new Object[0]));
        }
        int i3 = this.cwPtr;
        this.macroIndex = i3;
        int[] iArr = this.codewords;
        this.cwPtr = i3 + 1;
        iArr[i3] = MACRO_SEGMENT_ID;
        append(i, 5);
        String str = this.macroFileId;
        if (str != null) {
            append(str);
        }
        if (this.macroSegmentId >= this.macroSegmentCount - 1) {
            int[] iArr2 = this.codewords;
            int i4 = this.cwPtr;
            this.cwPtr = i4 + 1;
            iArr2[i4] = MACRO_LAST_SEGMENT;
        }
    }

    private void append(int i, int i2) {
        StringBuffer stringBuffer = new StringBuffer(i2 + 1);
        stringBuffer.append(Integer.toString(i));
        for (int length = stringBuffer.length(); length < i2; length++) {
            stringBuffer.insert(0, "0");
        }
        byte[] convertToBytes = PdfEncodings.convertToBytes(stringBuffer.toString(), "cp437");
        numberCompaction(convertToBytes, 0, convertToBytes.length);
    }

    private void append(String str) {
        byte[] convertToBytes = PdfEncodings.convertToBytes(str, "cp437");
        textCompaction(convertToBytes, 0, convertToBytes.length);
    }

    protected void dumpList() {
        if (this.segmentList.size() == 0) {
            return;
        }
        for (int i = 0; i < this.segmentList.size(); i++) {
            Segment segment = this.segmentList.get(i);
            int segmentLength = getSegmentLength(segment);
            char[] cArr = new char[segmentLength];
            for (int i2 = 0; i2 < segmentLength; i2++) {
                cArr[i2] = (char) (this.text[segment.start + i2] & 255);
                if (cArr[i2] == '\r') {
                    cArr[i2] = '\n';
                }
            }
            StringBuffer stringBuffer = new StringBuffer();
            stringBuffer.append(segment.type);
            stringBuffer.append(cArr);
            System.out.println(stringBuffer.toString());
        }
    }

    protected int getMaxSquare() {
        if (this.codeColumns > 21) {
            this.codeColumns = 29;
            this.codeRows = 32;
            return MACRO_SEGMENT_ID;
        }
        this.codeColumns = 16;
        this.codeRows = 58;
        return MACRO_SEGMENT_ID;
    }

    public void paintCode() {
        int i;
        boolean z = false;
        if ((this.options & 64) != 0) {
            int i2 = this.lenCodewords;
            if (i2 > MAX_DATA_CODEWORDS || i2 <= 0 || i2 != this.codewords[0]) {
                throw new IllegalArgumentException(MessageLocalization.getComposedMessage("invalid.codeword.size", new Object[0]));
            }
        } else {
            byte[] bArr = this.text;
            if (bArr == null) {
                throw new NullPointerException(MessageLocalization.getComposedMessage("text.cannot.be.null", new Object[0]));
            }
            if (bArr.length > ABSOLUTE_MAX_TEXT_SIZE) {
                throw new IndexOutOfBoundsException(MessageLocalization.getComposedMessage("the.text.is.too.big", new Object[0]));
            }
            this.segmentList = new SegmentList();
            breakString();
            assemble();
            this.segmentList = null;
            int[] iArr = this.codewords;
            int i3 = this.cwPtr;
            this.lenCodewords = i3;
            iArr[0] = i3;
        }
        int maxPossibleErrorLevel = maxPossibleErrorLevel(928 - this.lenCodewords);
        if ((this.options & 16) == 0) {
            int i4 = this.lenCodewords;
            if (i4 < 41) {
                this.errorLevel = 2;
            } else if (i4 < 161) {
                this.errorLevel = 3;
            } else if (i4 < 321) {
                this.errorLevel = 4;
            } else {
                this.errorLevel = 5;
            }
        }
        int i5 = this.errorLevel;
        if (i5 < 0) {
            this.errorLevel = 0;
        } else if (i5 > maxPossibleErrorLevel) {
            this.errorLevel = maxPossibleErrorLevel;
        }
        int i6 = this.codeColumns;
        if (i6 <= 0) {
            this.codeColumns = 1;
        } else if (i6 > 30) {
            this.codeColumns = 30;
        }
        int i7 = this.codeRows;
        if (i7 < 3) {
            this.codeRows = 3;
        } else if (i7 > 90) {
            this.codeRows = 90;
        }
        int i8 = 2 << this.errorLevel;
        boolean z2 = (4 & this.options) == 0;
        int i9 = this.lenCodewords + i8;
        int i10 = this.options;
        if ((i10 & 1) != 0) {
            i9 = this.codeColumns * this.codeRows;
            if (i9 > MACRO_SEGMENT_ID) {
                i9 = getMaxSquare();
            }
            int i11 = this.lenCodewords;
            if (i9 < i11 + i8) {
                i9 = i11 + i8;
            } else {
                z = true;
            }
        } else if ((i10 & 6) == 0) {
            float f = this.aspectRatio;
            if (f < 0.001d) {
                this.aspectRatio = 0.001f;
            } else if (f > 1000.0f) {
                this.aspectRatio = 1000.0f;
            }
            float f2 = this.aspectRatio;
            double d = (73.0f * f2) - 4.0f;
            Double.isNaN(d);
            Double.isNaN(d);
            Double.isNaN(d);
            double d2 = f2 * 68.0f * (this.lenCodewords + i8) * this.yHeight;
            Double.isNaN(d2);
            double sqrt = (-d) + Math.sqrt((d * d) + d2);
            double d3 = this.aspectRatio * 34.0f;
            Double.isNaN(d3);
            this.codeColumns = (int) ((sqrt / d3) + 0.5d);
            int i12 = this.codeColumns;
            if (i12 <= 0) {
                this.codeColumns = 1;
            } else if (i12 > 30) {
                this.codeColumns = 30;
            }
            z = false;
            z2 = true;
        } else {
            z = false;
        }
        if (z) {
            i = MACRO_SEGMENT_ID;
        } else {
            if (z2) {
                int i13 = i9 - 1;
                this.codeRows = (i13 / this.codeColumns) + 1;
                int i14 = this.codeRows;
                if (i14 < 3) {
                    this.codeRows = 3;
                } else if (i14 > 90) {
                    this.codeRows = 90;
                    this.codeColumns = (i13 / 90) + 1;
                }
            } else {
                int i15 = i9 - 1;
                this.codeColumns = (i15 / this.codeRows) + 1;
                if (this.codeColumns > 30) {
                    this.codeColumns = 30;
                    this.codeRows = (i15 / 30) + 1;
                }
            }
            i9 = this.codeRows * this.codeColumns;
            i = MACRO_SEGMENT_ID;
        }
        if (i9 > i) {
            i9 = getMaxSquare();
        }
        this.errorLevel = maxPossibleErrorLevel(i9 - this.lenCodewords);
        int i16 = this.lenCodewords;
        int i17 = (i9 - (2 << this.errorLevel)) - i16;
        if ((this.options & 256) != 0) {
            int[] iArr2 = this.codewords;
            int i18 = this.macroIndex;
            System.arraycopy(iArr2, i18, iArr2, i18 + i17, i17);
            this.cwPtr = this.lenCodewords + i17;
            while (true) {
                int i19 = i17 - 1;
                if (i17 == 0) {
                    break;
                }
                int[] iArr3 = this.codewords;
                int i20 = this.macroIndex;
                this.macroIndex = i20 + 1;
                iArr3[i20] = TEXT_MODE;
                i17 = i19;
            }
        } else {
            this.cwPtr = i16;
            while (true) {
                int i21 = i17 - 1;
                if (i17 == 0) {
                    break;
                }
                int[] iArr4 = this.codewords;
                int i22 = this.cwPtr;
                this.cwPtr = i22 + 1;
                iArr4[i22] = TEXT_MODE;
                i17 = i21;
            }
        }
        int[] iArr5 = this.codewords;
        int i23 = this.cwPtr;
        this.lenCodewords = i23;
        iArr5[0] = i23;
        calculateErrorCorrection(this.lenCodewords);
        this.lenCodewords = i9;
        outPaintCode();
    }

    public Image getImage() throws BadElementException {
        paintCode();
        return Image.getInstance(this.bitColumns, this.codeRows, false, 256, (this.options & 128) == 0 ? 0 : 1, CCITTG4Encoder.compress(this.outBits, this.bitColumns, this.codeRows), null);
    }

    public byte[] getOutBits() {
        return this.outBits;
    }

    public int getBitColumns() {
        return this.bitColumns;
    }

    public int getCodeRows() {
        return this.codeRows;
    }

    public void setCodeRows(int i) {
        this.codeRows = i;
    }

    public int getCodeColumns() {
        return this.codeColumns;
    }

    public void setCodeColumns(int i) {
        this.codeColumns = i;
    }

    public int[] getCodewords() {
        return this.codewords;
    }

    public int getLenCodewords() {
        return this.lenCodewords;
    }

    public void setLenCodewords(int i) {
        this.lenCodewords = i;
    }

    public int getErrorLevel() {
        return this.errorLevel;
    }

    public void setErrorLevel(int i) {
        this.errorLevel = i;
    }

    public byte[] getText() {
        return this.text;
    }

    public void setText(byte[] bArr) {
        this.text = bArr;
    }

    public void setText(String str) {
        this.text = PdfEncodings.convertToBytes(str, "cp437");
    }

    public int getOptions() {
        return this.options;
    }

    public void setOptions(int i) {
        this.options = i;
    }

    public float getAspectRatio() {
        return this.aspectRatio;
    }

    public void setAspectRatio(float f) {
        this.aspectRatio = f;
    }

    public float getYHeight() {
        return this.yHeight;
    }

    public void setYHeight(float f) {
        this.yHeight = f;
    }

    /* JADX INFO: Access modifiers changed from: protected */
    /* loaded from: classes.dex */
    public static class Segment {
        public int end;
        public int start;
        public char type;

        public Segment(char c, int i, int i2) {
            this.type = c;
            this.start = i;
            this.end = i2;
        }
    }

    /* JADX INFO: Access modifiers changed from: protected */
    /* loaded from: classes.dex */
    public static class SegmentList {
        protected ArrayList<Segment> list = new ArrayList<>();

        protected SegmentList() {
        }

        public void add(char c, int i, int i2) {
            this.list.add(new Segment(c, i, i2));
        }

        public Segment get(int i) {
            if (i < 0 || i >= this.list.size()) {
                return null;
            }
            return this.list.get(i);
        }

        public void remove(int i) {
            if (i < 0 || i >= this.list.size()) {
                return;
            }
            this.list.remove(i);
        }

        public int size() {
            return this.list.size();
        }
    }

    public java.awt.Image createAwtImage(Color color, Color color2) {
        int rgb = color.getRGB();
        int rgb2 = color2.getRGB();
        Canvas canvas = new Canvas();
        paintCode();
        int i = (int) this.yHeight;
        int i2 = this.bitColumns;
        int[] iArr = new int[this.codeRows * i2 * i];
        int i3 = (i2 + 7) / 8;
        int i4 = 0;
        int i5 = 0;
        while (true) {
            int i6 = this.codeRows;
            if (i4 < i6) {
                int i7 = i4 * i3;
                int i8 = i5;
                int i9 = 0;
                while (i9 < this.bitColumns) {
                    int i10 = i8 + 1;
                    iArr[i8] = (((this.outBits[(i9 / 8) + i7] & 255) << (i9 % 8)) & 128) == 0 ? rgb2 : rgb;
                    i9++;
                    i8 = i10;
                }
                for (int i11 = 1; i11 < i; i11++) {
                    int i12 = this.bitColumns;
                    System.arraycopy(iArr, i8 - i12, iArr, ((i11 - 1) * i12) + i8, i12);
                }
                i5 = (this.bitColumns * (i - 1)) + i8;
                i4++;
            } else {
                int i13 = this.bitColumns;
                return canvas.createImage(new MemoryImageSource(i13, i6 * i, iArr, 0, i13));
            }
        }
    }
}
